import { Request, Response } from "express";
<%_ if (path === '/health') { -%>
import { cfg } from "../config/app-config";
import { now } from "../tech/response";<%_ } else { -%>
import { serverError } from "<%- '../'.repeat(path.split('/').length - 1) %>tech/response";<%_ } %><%_ for (let i = 0; i < methods.length; i++) { %>

/**
 * <%- methods[i].toUpperCase() %> <%- path %>
<%_ if (comments && comments[i] && comments[i].length) { -%>
 * <%- comments[i] %>
<%_ } -%>
 */
 <%_ if (path === '/health' && methods[i] === 'get') { -%>
export const <%- methods[i] %> = (req: Request, res: Response): void => {
    // TODO: Format the response according schema
    res.json(Object.assign({}, cfg.about, { timestamp: now() }));
};<%_ } else { -%>
export const <%- methods[i] %> = async (req: Request, res: Response): Promise<void> => {<%_ if (params[i]) { %><%_ for (let j = 0; j < params[i].length; j++) { %>
    // const <%- params[i][j].name %> = <%-
      (params[i][j].in === 'path') ? `req.params.${params[i][j].name}` :
      (params[i][j].in === 'query') ? `req.query.${params[i][j].name}` :
      (params[i][j].in === 'header') ? `req.header.${params[i][j].name}` :
      (params[i][j].in === 'formData') ? `req.body.${params[i][j].name}` :
      (params[i][j].in === 'body') ? `req.body` :
        'null';
    %>;<%_ } -%>


<%_ } -%>
    // TODO: handler for <%- methods[i].toUpperCase() %> <%- path %>
    res.status(500).json(serverError("Handler for <%- methods[i].toUpperCase() %> <%- path %> not implemented."));
};<%_ } -%><%_ } %>
